(function(modules){var installedModules={};function __webpack_require__(moduleId){if(installedModules[moduleId]){return installedModules[moduleId].exports}var module=installedModules[moduleId]={i:moduleId,l:false,exports:{}};modules[moduleId].call(module.exports,module,module.exports,__webpack_require__);module.l=true;return module.exports}__webpack_require__.m=modules;__webpack_require__.c=installedModules;__webpack_require__.d=function(exports,name,getter){if(!__webpack_require__.o(exports,name)){Object.defineProperty(exports,name,{enumerable:true,get:getter})}};__webpack_require__.r=function(exports){if(typeof Symbol!=="undefined"&&Symbol.toStringTag){Object.defineProperty(exports,Symbol.toStringTag,{value:"Module"})}Object.defineProperty(exports,"__esModule",{value:true})};__webpack_require__.t=function(value,mode){if(mode&1)value=__webpack_require__(value);if(mode&8)return value;if(mode&4&&typeof value==="object"&&value&&value.__esModule)return value;var ns=Object.create(null);__webpack_require__.r(ns);Object.defineProperty(ns,"default",{enumerable:true,value:value});if(mode&2&&typeof value!="string")for(var key in value)__webpack_require__.d(ns,key,function(key){return value[key]}.bind(null,key));return ns};__webpack_require__.n=function(module){var getter=module&&module.__esModule?function getDefault(){return module["default"]}:function getModuleExports(){return module};__webpack_require__.d(getter,"a",getter);return getter};__webpack_require__.o=function(object,property){return Object.prototype.hasOwnProperty.call(object,property)};__webpack_require__.p="";return __webpack_require__(__webpack_require__.s=1)})([function(module,exports,__webpack_require__){(function(){"use strict";function polyfill(){var w=window;var d=document;if("scrollBehavior"in d.documentElement.style&&w.__forceSmoothScrollPolyfill__!==true){return}var Element=w.HTMLElement||w.Element;var SCROLL_TIME=468;var original={scroll:w.scroll||w.scrollTo,scrollBy:w.scrollBy,elementScroll:Element.prototype.scroll||scrollElement,scrollIntoView:Element.prototype.scrollIntoView};var now=w.performance&&w.performance.now?w.performance.now.bind(w.performance):Date.now;function isMicrosoftBrowser(userAgent){var userAgentPatterns=["MSIE ","Trident/","Edge/"];return new RegExp(userAgentPatterns.join("|")).test(userAgent)}var ROUNDING_TOLERANCE=isMicrosoftBrowser(w.navigator.userAgent)?1:0;function scrollElement(x,y){this.scrollLeft=x;this.scrollTop=y}function ease(k){return.5*(1-Math.cos(Math.PI*k))}function shouldBailOut(firstArg){if(firstArg===null||typeof firstArg!=="object"||firstArg.behavior===undefined||firstArg.behavior==="auto"||firstArg.behavior==="instant"){return true}if(typeof firstArg==="object"&&firstArg.behavior==="smooth"){return false}throw new TypeError("behavior member of ScrollOptions "+firstArg.behavior+" is not a valid value for enumeration ScrollBehavior.")}function hasScrollableSpace(el,axis){if(axis==="Y"){return el.clientHeight+ROUNDING_TOLERANCE<el.scrollHeight}if(axis==="X"){return el.clientWidth+ROUNDING_TOLERANCE<el.scrollWidth}}function canOverflow(el,axis){var overflowValue=w.getComputedStyle(el,null)["overflow"+axis];return overflowValue==="auto"||overflowValue==="scroll"}function isScrollable(el){var isScrollableY=hasScrollableSpace(el,"Y")&&canOverflow(el,"Y");var isScrollableX=hasScrollableSpace(el,"X")&&canOverflow(el,"X");return isScrollableY||isScrollableX}function findScrollableParent(el){while(el!==d.body&&isScrollable(el)===false){el=el.parentNode||el.host}return el}function step(context){var time=now();var value;var currentX;var currentY;var elapsed=(time-context.startTime)/SCROLL_TIME;elapsed=elapsed>1?1:elapsed;value=ease(elapsed);currentX=context.startX+(context.x-context.startX)*value;currentY=context.startY+(context.y-context.startY)*value;context.method.call(context.scrollable,currentX,currentY);if(currentX!==context.x||currentY!==context.y){w.requestAnimationFrame(step.bind(w,context))}}function smoothScroll(el,x,y){var scrollable;var startX;var startY;var method;var startTime=now();if(el===d.body){scrollable=w;startX=w.scrollX||w.pageXOffset;startY=w.scrollY||w.pageYOffset;method=original.scroll}else{scrollable=el;startX=el.scrollLeft;startY=el.scrollTop;method=scrollElement}step({scrollable:scrollable,method:method,startTime:startTime,startX:startX,startY:startY,x:x,y:y})}w.scroll=w.scrollTo=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){original.scroll.call(w,arguments[0].left!==undefined?arguments[0].left:typeof arguments[0]!=="object"?arguments[0]:w.scrollX||w.pageXOffset,arguments[0].top!==undefined?arguments[0].top:arguments[1]!==undefined?arguments[1]:w.scrollY||w.pageYOffset);return}smoothScroll.call(w,d.body,arguments[0].left!==undefined?~~arguments[0].left:w.scrollX||w.pageXOffset,arguments[0].top!==undefined?~~arguments[0].top:w.scrollY||w.pageYOffset)};w.scrollBy=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])){original.scrollBy.call(w,arguments[0].left!==undefined?arguments[0].left:typeof arguments[0]!=="object"?arguments[0]:0,arguments[0].top!==undefined?arguments[0].top:arguments[1]!==undefined?arguments[1]:0);return}smoothScroll.call(w,d.body,~~arguments[0].left+(w.scrollX||w.pageXOffset),~~arguments[0].top+(w.scrollY||w.pageYOffset))};Element.prototype.scroll=Element.prototype.scrollTo=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){if(typeof arguments[0]==="number"&&arguments[1]===undefined){throw new SyntaxError("Value could not be converted")}original.elementScroll.call(this,arguments[0].left!==undefined?~~arguments[0].left:typeof arguments[0]!=="object"?~~arguments[0]:this.scrollLeft,arguments[0].top!==undefined?~~arguments[0].top:arguments[1]!==undefined?~~arguments[1]:this.scrollTop);return}var left=arguments[0].left;var top=arguments[0].top;smoothScroll.call(this,this,typeof left==="undefined"?this.scrollLeft:~~left,typeof top==="undefined"?this.scrollTop:~~top)};Element.prototype.scrollBy=function(){if(arguments[0]===undefined){return}if(shouldBailOut(arguments[0])===true){original.elementScroll.call(this,arguments[0].left!==undefined?~~arguments[0].left+this.scrollLeft:~~arguments[0]+this.scrollLeft,arguments[0].top!==undefined?~~arguments[0].top+this.scrollTop:~~arguments[1]+this.scrollTop);return}this.scroll({left:~~arguments[0].left+this.scrollLeft,top:~~arguments[0].top+this.scrollTop,behavior:arguments[0].behavior})};Element.prototype.scrollIntoView=function(){if(shouldBailOut(arguments[0])===true){original.scrollIntoView.call(this,arguments[0]===undefined?true:arguments[0]);return}var scrollableParent=findScrollableParent(this);var parentRects=scrollableParent.getBoundingClientRect();var clientRects=this.getBoundingClientRect();if(scrollableParent!==d.body){smoothScroll.call(this,scrollableParent,scrollableParent.scrollLeft+clientRects.left-parentRects.left,scrollableParent.scrollTop+clientRects.top-parentRects.top);if(w.getComputedStyle(scrollableParent).position!=="fixed"){w.scrollBy({left:parentRects.left,top:parentRects.top,behavior:"smooth"})}}else{w.scrollBy({left:clientRects.left,top:clientRects.top,behavior:"smooth"})}}}if(true){module.exports={polyfill:polyfill}}else{}})()},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__);class videoPlayer{constructor(video,button){this.video=video;this.button=button;this.button.addEventListener("click",()=>{this.playVideo()})}playVideo(){if(!this.video.parentNode.classList.contains("active")){this.video.controls=true;this.video.play();this.video.parentNode.classList.add("active")}else{this.video.controls=false;this.video.pause();this.button.parentNode.classList.remove("active")}}}class popupFunc{constructor(popup,button){this.button=button;this.popup=popup;this.openPopupFunc=this.openPopup.bind(this);this.closePopupFunc=this.closePopup.bind(this);if(Array.isArray(this.button)){this.button.forEach(elem=>{elem.addEventListener("click",this.openPopupFunc)})}else{this.button.addEventListener("click",this.openPopupFunc)}this.popup.querySelector(".close").addEventListener("click",this.closePopupFunc);this.popup.parentNode.addEventListener("click",this.closePopupFunc)}openPopup(event){event.preventDefault();this.popup.classList.add("open");this.popup.parentNode.classList.add("open")}closePopup(event){if(!event.target.classList.contains("close")&&event.target.closest(".popup")!==null){event.stopPropagation()}else{this.popup.classList.remove("open");this.popup.parentNode.classList.remove("open")}}}class BurgerMenu{constructor(popup,burger){this.burger=burger;this.popup=popup;let thisOpenPopup=this.openPopup.bind(this);let thisClosePopup=this.closePopup.bind(this);this.burger.addEventListener("click",thisOpenPopup);this.popup.querySelector(".close").addEventListener("click",thisClosePopup);document.querySelector("header .order.close").addEventListener("click",thisClosePopup);this.popup.querySelectorAll("a").forEach(elem=>elem.addEventListener("click",thisClosePopup))}openPopup(){this.popup.classList.add("open");document.querySelector(".user-panel").classList.add("active")}closePopup(){this.popup.classList.remove("open");document.querySelector(".user-panel").classList.remove("active")}}var smoothscroll=__webpack_require__(0);var smoothscroll_default=__webpack_require__.n(smoothscroll);smoothscroll_default.a.polyfill();function iOS(){return["iPad Simulator","iPhone Simulator","iPod Simulator","iPad","iPhone","iPod"].includes(navigator.platform)||navigator.userAgent.includes("Mac")&&"ontouchend"in document}if(document.querySelector("section.info .image")){let allImages=document.querySelectorAll("section.info .image img");let mySiema=new Siema({selector:"section.info .image",duration:700,easing:"ease-out",perPage:1,startIndex:0,draggable:false,multipleDrag:true,threshold:20,loop:true,rtl:false,onInit:function(){allImages[this.currentSlide].classList.remove("active");setTimeout(()=>{this.next();setTimeout(()=>{allImages[this.currentSlide].classList.add("active")},500)},500);setInterval(()=>{allImages[this.currentSlide].classList.remove("active");setTimeout(()=>{this.next();setTimeout(()=>{allImages[this.currentSlide].classList.add("active")},500)},500)},6500)},onChange:function(){}})}if(document.querySelector(".reviews .video")){document.querySelectorAll(".reviews .video").forEach(elem=>{new videoPlayer(elem.querySelector("video"),elem.querySelector(".play-btn"))})}if(document.querySelector(".wrapper .popup")){new popupFunc(document.querySelector(".wrapper .popup"),[document.querySelector("header .order"),document.querySelector("section.info .btn")])}new BurgerMenu(document.querySelector("header nav"),document.querySelector("header .burger"));function SmoothVerticalScrolling(e,time,where){let eTop;if(iOS){eTop=e.offsetTop}else{eTop=e.getBoundingClientRect().top}window.scrollTo({top:eTop-50,behavior:"smooth"})}document.querySelectorAll("header nav a").forEach(link=>{link.addEventListener("click",()=>{SmoothVerticalScrolling(document.querySelector(`${link.dataset.href}`),1500,"top")})})}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
